// Generated by CoffeeScript 1.5.0
(function() {
  var PayPeriod, moment,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (typeof require !== "undefined" && require !== null) {
    moment = require('moment');
  } else {
    moment = this.moment;
  }

  PayPeriod = (function() {

    function PayPeriod(date, type, options) {
      this._biweekly = __bind(this._biweekly, this);      options || (options = {});
      this.format = options.format || 'YYYY-MM-DD';
      this.yearStart = this._initDate(options.yearStart);
      this.type = type || 'weekly';
      switch (this.type) {
        case 'weekly':
          this._weekly(date);
          break;
        case 'biweekly':
          this._biweekly(date);
          break;
        case 'semimonthly':
          this._semimonthly(date);
          break;
        case 'monthly':
          this._monthly(date);
      }
    }

    PayPeriod.prototype._weekly = function(date) {
      var s, start, stop;
      s = this.yearStart.clone();
      while (this._lte(s, date)) {
        s.add('w', 1);
      }
      start = s.clone().subtract('w', 1);
      stop = start.clone().add('d', 6);
      return this._formatResult(start, stop);
    };

    PayPeriod.prototype._biweekly = function(date) {
      var s, start, stop;
      s = this.yearStart.clone();
      while (this._lte(s, date)) {
        s.add('w', 2);
      }
      start = s.clone().subtract('w', 2);
      stop = start.clone().add('d', 13);
      return this._formatResult(start, stop);
    };

    PayPeriod.prototype._semimonthly = function(date) {
      var e, s;
      if (date.date() < 16) {
        s = moment([date.year(), date.month()]);
        e = moment([date.year(), date.month(), 15]);
      } else {
        s = moment([date.year(), date.month(), 16]);
        e = moment([date.year(), date.month()]).add('M', 1).subtract('d', 1);
      }
      return this._formatResult(s, e);
    };

    PayPeriod.prototype._monthly = function(date) {
      var e, s;
      s = moment([date.year(), date.month()]);
      e = s.clone().add('M', 1).subtract('d', 1);
      return this._formatResult(s, e);
    };

    PayPeriod.prototype._lte = function(d1, d2) {
      return d1.unix() <= d2.unix();
    };

    PayPeriod.prototype._formatResult = function(start, stop) {
      this.start = start.format(this.format);
      this.stop = stop.format(this.format);
      return this.days = this._days(start, stop);
    };

    PayPeriod.prototype._days = function(start, stop) {
      var a, s;
      s = start.clone();
      a = [];
      while (this._lte(s, stop)) {
        a.push(s.format(this.format));
        s.add('d', 1);
      }
      return a;
    };

    PayPeriod.prototype._initDate = function(date) {
      date || (date = moment);
      if (moment.isMoment(date)) {
        return date;
      } else {
        return moment(date, this.format);
      }
    };

    return PayPeriod;

  })();

  moment.fn.payperiod = function(type, options) {
    return new PayPeriod(this, type, options);
  };

}).call(this);
