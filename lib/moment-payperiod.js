// Generated by CoffeeScript 1.5.0
(function() {
  var PayPeriod, moment;

  if (typeof require !== "undefined" && require !== null) {
    moment = require('moment');
  } else {
    moment = this.moment;
  }

  PayPeriod = (function() {

    function PayPeriod(date, type, options) {
      this.date = this._initDate(date);
      this.options = options || {};
      this.format = this.options.format || 'YYYY-MM-DD';
      this.epoch = this._initDate(this.options.epoch);
      this.type = type || 'weekly';
      switch (this.type) {
        case 'weekly':
          this._numberOfDays(7);
          break;
        case 'biweekly':
          this._numberOfDays(14);
          break;
        case 'semimonthly':
          this._semimonthly();
          break;
        case 'monthly':
          this._monthly();
      }
    }

    PayPeriod.prototype.next = function() {
      var date;
      date = moment(this.stop, this.format).add('d', 1);
      return new PayPeriod(date, this.type, this.options);
    };

    PayPeriod.prototype.previous = function() {
      var date;
      date = moment(this.start, this.format).subtract('d', 1);
      return new PayPeriod(date, this.type, this.options);
    };

    PayPeriod.prototype._numberOfDays = function(days) {
      var diff, start, stop;
      diff = Math.floor(this.date.diff(this.epoch, 'days') / days) * days;
      start = this.epoch.clone().add('d', diff);
      stop = start.clone().add('d', days - 1);
      return this._formatResult(start, stop);
    };

    PayPeriod.prototype._semimonthly = function() {
      var date, e, s;
      date = this.date;
      if (date.date() < 16) {
        s = moment([date.year(), date.month()]);
        e = moment([date.year(), date.month(), 15]);
      } else {
        s = moment([date.year(), date.month(), 16]);
        e = moment([date.year(), date.month()]).add('M', 1).subtract('d', 1);
      }
      return this._formatResult(s, e);
    };

    PayPeriod.prototype._monthly = function() {
      var date, e, s;
      date = this.date;
      s = moment([date.year(), date.month()]);
      e = s.clone().add('M', 1).subtract('d', 1);
      return this._formatResult(s, e);
    };

    PayPeriod.prototype._lte = function(d1, d2) {
      return d1.unix() <= d2.unix();
    };

    PayPeriod.prototype._formatResult = function(start, stop) {
      this.start = start.format(this.format);
      this.stop = stop.format(this.format);
      return this.days = this._days(start, stop);
    };

    PayPeriod.prototype._days = function(start, stop) {
      var a, s;
      s = start.clone();
      a = [];
      while (this._lte(s, stop)) {
        a.push(s.format(this.format));
        s.add('d', 1);
      }
      return a;
    };

    PayPeriod.prototype._initDate = function(date) {
      date || (date = moment);
      if (moment.isMoment(date)) {
        return date;
      } else {
        return moment(date, this.format);
      }
    };

    return PayPeriod;

  })();

  moment.fn.payperiod = function(type, options) {
    return new PayPeriod(this, type, options);
  };

}).call(this);
